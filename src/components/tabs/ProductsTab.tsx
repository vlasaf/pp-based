
import React, { useState } from 'react';
import { useGame, ProductType } from '../../contexts/GameContext';

const ProductsTab: React.FC = () => {
  const { products, upgradeProduct, knowledgePoints, completeMission } = useGame();
  const [selectedProduct, setSelectedProduct] = useState<ProductType | null>(null);
  const [showQuiz, setShowQuiz] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(0);

  const handleProductClick = (productId: ProductType) => {
    const product = products.find(p => p.id === productId);
    if (product && product.unlocked) {
      setSelectedProduct(productId);
      setShowQuiz(false);
    }
  };

  const startQuiz = () => {
    setShowQuiz(true);
    setCurrentQuestion(0);
  };

  const handleQuizAnswer = (isCorrect: boolean) => {
    if (isCorrect) {
      if (currentQuestion < 2) {
        setCurrentQuestion(prev => prev + 1);
      } else {
        // Quiz completed
        if (selectedProduct) {
          upgradeProduct(selectedProduct);
          // Complete related mission if exists
          const relatedMission = 'mission-1';
          completeMission(relatedMission);
        }
        setShowQuiz(false);
      }
    } else {
      // Incorrect answer
      alert('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
    }
  };

  const getProductQuestions = (productId: ProductType) => {
    // Simple questions for each product
    const questionSets = {
      deposits: [
        {
          question: '–ö–∞–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥?',
          options: [
            { text: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', correct: false },
            { text: '–ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞', correct: true },
            { text: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è', correct: false },
          ],
        },
        {
          question: '–ö–∞–∫–æ–π –≤–∫–ª–∞–¥ –ø–æ–¥–æ–π–¥–µ—Ç –∫–ª–∏–µ–Ω—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–ø–∏—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å –ø–æ –∏–ø–æ—Ç–µ–∫–µ?',
          options: [
            { text: '–í–∫–ª–∞–¥ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–Ω—è—Ç–∏—è', correct: false },
            { text: '–í–∫–ª–∞–¥ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π', correct: false },
            { text: '–í–∫–ª–∞–¥ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º', correct: true },
          ],
        },
        {
          question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤?',
          options: [
            { text: '–ö–æ–≥–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø—Ä–∏–±–∞–≤–ª—è—é—Ç—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—É–º–º–µ –≤–∫–ª–∞–¥–∞', correct: true },
            { text: '–ö–æ–≥–¥–∞ –±–∞–Ω–∫ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞–ª–æ–≥ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', correct: false },
            { text: '–ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã', correct: false },
          ],
        },
      ],
      credits: [
        {
          question: '–ß—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –ø–æ –∫—Ä–µ–¥–∏—Ç—É?',
          options: [
            { text: '–¢–æ–ª—å–∫–æ –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞', correct: false },
            { text: '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è, –¥–æ—Ö–æ–¥ –∏ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞', correct: true },
            { text: '–¢–æ–ª—å–∫–æ —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞', correct: false },
          ],
        },
        {
          question: '–ö–∞–∫–æ–π —Ç–∏–ø –∫—Ä–µ–¥–∏—Ç–∞ –ª—É—á—à–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏?',
          options: [
            { text: '–ò–ø–æ—Ç–µ—á–Ω—ã–π –∫—Ä–µ–¥–∏—Ç', correct: false },
            { text: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç', correct: true },
            { text: '–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç', correct: false },
          ],
        },
        {
          question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–∞ (–ü–°–ö)?',
          options: [
            { text: '–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ + –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å', correct: false },
            { text: '–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ + –ø—Ä–æ—Ü–µ–Ω—Ç—ã', correct: false },
            { text: '–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞–µ–º—â–∏–∫–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É, –≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏–∏ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏', correct: true },
          ],
        },
      ],
      cards: [
        {
          question: '–í —á–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ –¥–µ–±–µ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã –æ—Ç –∫—Ä–µ–¥–∏—Ç–Ω–æ–π?',
          options: [
            { text: '–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞', correct: true },
            { text: '–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≤—Å–µ–≥–¥–∞ —Å –∫—ç—à–±—ç–∫–æ–º, –∞ –∫—Ä–µ–¥–∏—Ç–Ω–∞—è - –Ω–µ—Ç', correct: false },
            { text: '–ü–æ –¥–µ–±–µ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–µ –Ω–µ–ª—å–∑—è —Å–Ω–∏–º–∞—Ç—å –Ω–∞–ª–∏—á–Ω—ã–µ', correct: false },
          ],
        },
        {
          question: '–ö–∞–∫–æ–π —Ç–∏–ø –∫–∞—Ä—Ç—ã –ª—É—á—à–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç?',
          options: [
            { text: '–û–±—ã—á–Ω—É—é –¥–µ–±–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π', correct: false },
            { text: '–ü—Ä–µ–º–∏–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É —Å –±–æ–Ω—É—Å–∞–º–∏ –∑–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π', correct: true },
            { text: '–ö—Ä–µ–¥–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ª–∏–º–∏—Ç–æ–º', correct: false },
          ],
        },
        {
          question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –≥—Ä–µ–π—Å-–ø–µ—Ä–∏–æ–¥ –ø–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ?',
          options: [
            { text: '–ü–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç—É –Ω–µ –Ω—É–∂–Ω–æ –≤–Ω–æ—Å–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂', correct: false },
            { text: '–ü–µ—Ä–∏–æ–¥, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –≤–∑–∏–º–∞—é—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø–æ–≥–∞—à–µ–Ω–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏', correct: true },
            { text: '–ü–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–µ', correct: false },
          ],
        },
      ],
      mortgage: [
        {
          question: '–ß—Ç–æ —Ç–∞–∫–æ–µ LTV –≤ –∏–ø–æ—Ç–µ—á–Ω–æ–º –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–∏?',
          options: [
            { text: '–†–∞–∑–º–µ—Ä –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∏–ø–æ—Ç–µ–∫–µ', correct: false },
            { text: '–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞ –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', correct: true },
            { text: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ø–æ—Ç–µ—á–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞', correct: false },
          ],
        },
        {
          question: '–ö–∞–∫–æ–µ —É—Å–ª–æ–≤–∏–µ –∏–ø–æ—Ç–µ–∫–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —Ä–∞–∑–º–µ—Ä –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞?',
          options: [
            { text: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏', correct: false },
            { text: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞', correct: true },
            { text: '–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞', correct: false },
          ],
        },
        {
          question: '–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ø–æ—Ç–µ–∫–∏?',
          options: [
            { text: '–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–ø–æ—Ç–µ–∫–∏ –Ω–∞ –¥—Ä—É–≥—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', correct: false },
            { text: '–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞ –Ω–∞ –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ', correct: true },
            { text: '–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∏–ø–æ—Ç–µ–∫–∏', correct: false },
          ],
        },
      ],
    };
    
    return questionSets[productId] || questionSets.cards;
  };

  const getUpgradeCost = (product: any) => {
    return 100 * (product.level + 1);
  };

  const selectedProductData = selectedProduct 
    ? products.find(p => p.id === selectedProduct) 
    : null;

  const questions = selectedProduct ? getProductQuestions(selectedProduct) : [];
  const currentQuestionData = questions[currentQuestion];

  return (
    <div className="p-4 pb-16">
      {!selectedProduct ? (
        <>
          <h2 className="text-xl font-bold text-center mb-6">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã</h2>
          <div className="grid grid-cols-2 gap-4">
            {products.map(product => (
              <div
                key={product.id}
                className={`card-product ${!product.unlocked ? 'opacity-50' : ''}`}
                onClick={() => handleProductClick(product.id as ProductType)}
              >
                <div className="text-4xl mb-2">{product.icon}</div>
                <h3 className="font-semibold mb-1">{product.name}</h3>
                {product.unlocked && (
                  <div className="text-xs text-gray-600">–£—Ä–æ–≤–µ–Ω—å: {product.level}</div>
                )}
                {product.unlocked && product.pointsPerSecond > 0 && (
                  <div className="text-xs text-blue-600">
                    +{product.pointsPerSecond} üìö/—Å–µ–∫
                  </div>
                )}
                {!product.unlocked && (
                  <div className="text-xs text-gray-600">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</div>
                )}
              </div>
            ))}
          </div>
        </>
      ) : showQuiz ? (
        <div className="bg-white p-4 rounded-lg shadow-sm border border-border">
          <h3 className="font-semibold text-center mb-4">
            –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ 3
          </h3>
          <p className="mb-4">{currentQuestionData.question}</p>
          <div className="space-y-3">
            {currentQuestionData.options.map((option, index) => (
              <button
                key={index}
                className="w-full text-left p-3 rounded-lg border border-border hover:bg-bank-blue/50 tap-highlight"
                onClick={() => handleQuizAnswer(option.correct)}
              >
                {option.text}
              </button>
            ))}
          </div>
        </div>
      ) : (
        <div>
          <div className="flex items-center mb-4">
            <button
              className="tap-highlight text-blue-500"
              onClick={() => setSelectedProduct(null)}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>
            <h2 className="text-xl font-bold text-center flex-1">
              {selectedProductData?.name}
            </h2>
          </div>
          
          <div className="text-6xl text-center my-6">
            {selectedProductData?.icon}
          </div>
          
          <div className="bg-white p-4 rounded-lg shadow-sm border border-border mb-4">
            <h3 className="font-semibold mb-2">–û –ø—Ä–æ–¥—É–∫—Ç–µ</h3>
            <p className="text-sm">{selectedProductData?.description}</p>
            <div className="mt-2 text-sm">
              <div>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {selectedProductData?.level}</div>
              <div>–ü—Ä–∏–Ω–æ—Å–∏—Ç: +{selectedProductData?.pointsPerSecond} –∑–Ω–∞–Ω–∏–π/—Å–µ–∫</div>
            </div>
          </div>
          
          <div className="bg-bank-green p-4 rounded-lg mb-4">
            <h3 className="font-semibold mb-2 text-center">–ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π</h3>
            {selectedProductData && (
              <div className="flex justify-center mb-3">
                <div className="flex items-center">
                  <span className="mr-1">üìö</span>
                  <span>{getUpgradeCost(selectedProductData)}</span>
                </div>
              </div>
            )}
            <div className="flex gap-4">
              <button
                className="btn-primary w-full"
                onClick={startQuiz}
              >
                –ü—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ
              </button>
              <button
                className={`btn-primary w-full ${selectedProductData && knowledgePoints < getUpgradeCost(selectedProductData) ? 'opacity-50' : ''}`}
                disabled={selectedProductData && knowledgePoints < getUpgradeCost(selectedProductData)}
                onClick={() => selectedProduct && upgradeProduct(selectedProduct)}
              >
                –£–ª—É—á—à–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductsTab;
